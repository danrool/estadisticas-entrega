---
format: html
editor: visual
---

```{r}
library(ggplot2)
library(dplyr)
```

Cargar los datos en un dataframe llamado: airbnb

```{r}
# Cargar datos, separador ","
airbnb<-read.csv('data//airbnb.csv',sep = ',', stringsAsFactors = T)

# Verificar estructurar
str(airbnb)

# Ver primeras filas de df
head(airbnb)

```

Mostrar las primeras 6 filas del dataframe

airbnb.

```{r}
# Mostrar primeras 6 filas, dos formas.
airbnb[1:6,]

head(airbnb, n=6)

```

Renombrar las columnas de la siguiente forma:

| Nombre original        | Nuevo nombre   |
|------------------------|----------------|
| Zipcode                | CodigoPostal   |
| Neighbourhood.Cleansed | Barrio         |
| Property.Type          | TipoPropiedad  |
| Room.Type              | TipoAlquiler   |
| Accommodates           | MaxOcupantes   |
| Bathrooms              | NumBanyos      |
| Bedrooms               | NumDormitorios |
| Beds                   | NumCamas       |
| Bed.Type               | TipoCama       |
| Amenities              | Comodidades    |
| Square.Feet            | PiesCuadrados  |
| Price                  | Precio         |
| Review.Scores.Rating   | Puntuacion     |

```{r}

# Definir los nuevos nombre como vector
newnames<-c("CodigoPostal","Barrio","TipoPropiedad","TipoAlquiler","MaxOcupantes","NumBanyos", "NumDormitorios","NumCamas","TipoCama","Comodidades","PiesCuadrados","Precio","Puntuacion")

# Modificar el nombre de las columas
colnames(airbnb)<-newnames

#Observar las primeras filas
airbnb[1:6,]

```

1.  Crea una nueva columna llamada MetrosCuadrados a partir de la columna PiesCuadrados.

Ayuda: 1 pie cuadrado son 0,092903 metros cuadrdados

```{r}
# Crear nueva columna MetrosCuadrados
airbnb$MetrosCuadrados<-airbnb$PiesCuadrados*0.092903

#Observar las primeras filas
head(airbnb, n=6)
```

------------------------------------------------------------------------

2.  Miremos el código postal. Es una variable con entradas erroneas. Hay valores como '','-' y '28' que deberían ser considerados como NA. Así mismo también debería ser NA todos los que no compiencen por 28, ya que estamos con códigos postales de Madrid

```{r}

# Limpiar columna CodigoPosta
airbnb$CodigoPostal <- ifelse(airbnb$CodigoPostal == '' | airbnb$CodigoPostal == '-' | !grepl("^28", airbnb$CodigoPostal)
                        , NA
                        ,airbnb$CodigoPostal)


# Mostrar las primeras fila y un resumen de CodigoPostal y df
head(airbnb, n = 6)
str(airbnb$CodigoPostal)
summary(airbnb$CodigoPostal)
summary(airbnb)



```

El código postal 28002, 28004 y 28051 tienen entradas repetidas. Por ejemplo las entradas 28002\n20882 deberían ir dnetro de 28002

```{r}


# Reemplazar el código postal por el valor que está delante del \n

df<- airbnb |>
        mutate(CodigoPostal = sub("^(28002|28004|28051)\\n(\\d+)$", "\\1", CodigoPostal)) |>
        arrange(CodigoPostal)
  

print(df)
  
  mutate(CodigoPostal = gsub("\n.*", "", CodigoPostal)) 

View(df)

airbnb <- airbnb %>%
  mutate(CodigoPostal = gsub("\n.*", "", CodigoPostal)) 


airbnb$CodigoPostal[which(airbnb$CodigoPostal == '28002\n28002')] = '28002'


```

El codigo 2804 debería ser 28004, 2805 deberia ser 28005 y 2815 juncto con 2815 debería ser 28015

Limpia los datos de la columna Codigo Postal

```{r}

airbnb$CodigoPostal[which(airbnb$CodigoPostal == '2804')] = '28004'
airbnb$CodigoPostal[which(airbnb$CodigoPostal == '2805')] = '28005'
airbnb$CodigoPostal[which(airbnb$CodigoPostal == '2815')] = '28015'

#str(airbnb$CodigoPostal)
#summary(airbnb)


```

------------------------------------------------------------------------

3.  Una vez limpios los datos ¿Cuales son los códigos postales que tenemos?

```{r}

table(airbnb$CodigoPostal)


```

------------------------------------------------------------------------

4.  ¿Cuales son los 5 códigos postales con más entradas? ¿Y con menos? ¿Cuantas entradas tienen?

```{r}

entradas <- airbnb |> group_by(CodigoPostal) |> count(sort = TRUE)

print(head(entradas, 5))

print(tail(entradas, 5))

```

------------------------------------------------------------------------

5.  ¿Cuales son los barrios que hay en el código postal 28012?

```{r}

barios_28012 <- unique(airbnb$Barrio[which(airbnb$CodigoPostal == 28012)])

print (barios_28012)


```

------------------------------------------------------------------------

6.  ¿Cuantas entradas hay en cada uno de esos barrios para el codigo postal 28012?

```{r}

#df_entradas_barrio <- airbnb$Barrio[which(airbnb$CodigoPosta  == 28012)]
#summary(df_entradas_barrio)

df_28012 <- airbnb |> filter(CodigoPostal == 28012) |> group_by(Barrio) |> count(sort = TRUE)

print(df_28012)

```

------------------------------------------------------------------------

7.  ¿Cuantos barrios hay en todo el dataset airbnb? ¿Cuales son?

```{r}

#length(summary(df_entradas_barrio))
#100

df_barrios <- unique(airbnb$Barrio)


cat('\nHay ', as.character(length(df_barrios)), ' barrios\n\n')
print(df_barrios)

```

------------------------------------------------------------------------

8.  ¿Cuales son los 5 barrios que tienen mayor número entradas?

```{r}

barrios <- airbnb |> group_by(Barrio) |> count(sort = TRUE)

print(head(barrios, 5))


```

------------------------------------------------------------------------

9.  ¿Cuantos Tipos de Alquiler diferentes hay? ¿Cuales son? ¿Cuantas entradas en el dataframe hay por cada tipo?

Muestra el diagrama de cajas del precio para cada uno de los diferentes Tipos de Alquiler

```{r}

tipos_alquileres <- airbnb |> group_by(TipoAlquiler) |> count(sort = TRUE)

print(tipos_alquileres)

ggplot(airbnb, aes(x = TipoAlquiler, y = Precio)) +
  geom_boxplot() +
  labs(title = "Diagrama de Cajas del Precio por Tipo de Alquiler",
       x = "Tipo de Alquiler", y = "Precio")

```

------------------------------------------------------------------------

10. Cual es el precio medio de alquiler de cada uno, la diferencia que hay ¿es estadísticamente significativa? ¿Con que test lo comprobarías?

```{r}

resultados_dplyr <- airbnb |> 
    group_by(TipoAlquiler) |> 
    summarize(PrecioMedio = mean(Precio, na.rm = TRUE))

print(resultados_dplyr)

paste("Comprobamos la calidad del dato")

summary(resultados_dplyr)

#Entire home/apt	7903			
#Private room	5113			
#Shared room
# 
# df_Entire <- airbnb$Precio[which(airbnb$TipoAlquiler == 'Entire home/apt')]
# df_Private <- airbnb$Precio[which(airbnb$TipoAlquiler == 'Private room')]
# df_Shared <- airbnb$Precio[which(airbnb$TipoAlquiler == 'Shared room')]
# #print(df_Entire)
# 
# print(df_Shared)
# 
# paste("El precio medio es ", mean(df_Entire))
# paste("                   ", median(df_Entire))
# paste("                   ", sd(df_Entire))
# paste("El precio medio es ", mean(df_Private))
# paste("                   ", median(df_Private))
# paste("                   ", sd(df_Private))
# paste("El precio medio es ", mean(df_Shared))
# paste("                   ", median(df_Shared))
# paste("                   ", sd(df_Shared))


```

------------------------------------------------------------------------

11. Filtra el dataframe cuyos tipo de alquiler sea 'Entire home/apt' y guardalo en un dataframe llamado *airbnb_entire*. Estas serán las entradas que tienen un alquiler del piso completo.

```{r}

airbnb_entire <- airbnb |> filter(TipoAlquiler =="Entire home/apt")

print(airbnb_entire)

```

------------------------------------------------------------------------

12. ¿Cuales son los 5 barrios que tienen un mayor número de apartamentos enteros en alquiler? Nota: Mirar solo en airbnb_entire. A partir de este punto y hasta que se diga lo contrario partiremos de airbnb_entire.

```{r}

barrios_airbnb_entire <- airbnb_entire |> group_by(Barrio) |> count(sort = TRUE)

print(barrios_airbnb_entire)

```

------------------------------------------------------------------------

13. ¿Cuales son los 5 barrios que tienen un mayor precio medio de alquiler para apartamentos enteros (es decir, del dataframe airbnb_entire)? ¿Cual es su precio medio?

Ayuda: Usa la función aggregate `aggregate(.~colname,df,mean,na.rm=TRUE)`

```{r}

barrios_mayor_precio_medio1 <- airbnb_entire |> 
                                group_by(Barrio) |> 
                                summarize(PrecioMedio = mean(Precio))

print(barrios_mayor_precio_medio1)



barrios_mayor_precio_medio2 <- aggregate(Precio ~ Barrio, data = airbnb_entire, mean)

print(barrios_mayor_precio_medio2)

```

------------------------------------------------------------------------

14. ¿Cuantos apartamentos hay en cada uno de esos barrios?

Mostrar una dataframe con el nombre del barrio, el precio y el número de entradas.

Ayuda: Podeis crear un nuevo dataframe con las columnas "Barrio" y "Freq" que contenga el número de entradas en cada barrio y hacer un merge con el dataframe del punto anterior.

```{r}

barrios_mayor_precio_medio_aptos <- airbnb_entire %>%
  group_by(Barrio) %>%
  summarize(
    PrecioMedio = mean(Precio, na.rm = TRUE),
    Registros = n()
  )

print(barrios_mayor_precio_medio_aptos)

```

------------------------------------------------------------------------

15. Partiendo del dataframe anterior, muestra los 5 barrios con mayor precio, pero que tengan más de 100 entradas de alquiler.

```{r}

barrios_mayor_precio_100_entradas <- barrios_mayor_precio_medio_aptos |> 
          filter(Registros >100) |>
          arrange(desc(PrecioMedio)) |>
          top_n(5)
  
          #top_n(5, PrecioMedio)
  
          #slice_max(sort(PrecioMedio, decreasing=TRUE), n = 5) 
          #top_n(n = 5, sort(PrecioMedio, decreasing=TRUE)) 
          
print(barrios_mayor_precio_100_entradas)

```

------------------------------------------------------------------------

16. Dibuja el diagrama de densidad de distribución de los diferentes precios. Serían 5 gráficas, una por cada barrio.

```{r}

#dfsol <- airbnb_entire |>
#            filter(Barrio == 'Sol')
#print(dfsol)
#ggplot(dfsol, aes(x = Precio, colour = Barrio)) + geom_density()

#dfcortes <- airbnb_entire |>
#            filter(Barrio == 'Cortes')
#print(dfcortes)
#ggplot(dfcortes, aes(x = Precio, colour = Barrio)) + geom_density()

# Filtrar los datos solo para los 5 barrios de interés
datos_barrios_interes <- airbnb_entire %>%
  filter(Barrio %in% barrios_mayor_precio_100_entradas$Barrio)

# Crear el diagrama de densidad
ggplot(datos_barrios_interes, aes(x = Precio, fill = Barrio)) +
  geom_density(alpha = 0.5) +
  facet_wrap(~Barrio, scales = "free") +
  labs(title = "Diagrama de Densidad de Precios por Barrio", x = "Precio", y = "Densidad")



```

------------------------------------------------------------------------

17. Calcula el tamaño medio, en metros cuadrados, para los 5 barrios anteriores y muestralo en el mismo dataframe junto con el precio y número de entradas

```{r}
# Filtrar los datos solo para los 5 barrios de interés
datos_barrios_interes <- airbnb_entire %>%
  filter(Barrio %in% barrios_mayor_precio_100_entradas$Barrio)

# Calcular el tamaño medio por barrio
tamano_medio <- datos_barrios_interes %>%
  group_by(Barrio) %>%
  summarize(
    TamanoMedio = mean(PiesCuadrados, na.rm = TRUE)
  )

# Unir la información al DataFrame original
resultados_finales <- left_join(barrios_mayor_precio_100_entradas, tamano_medio, by = "Barrio")

# Imprimir el DataFrame final
print(resultados_finales)


```

------------------------------------------------------------------------

18. Dibuja el diagrama de densidad de distribución de los diferentes tamaños de apartamentos. Serían 5 gráficas, una por cada barrio.

```{r}

# Filtrar los datos solo para los 5 barrios de interés
datos_barrios_interes <- airbnb_entire %>%
  filter(Barrio %in% barrios_mayor_precio_100_entradas$Barrio)

# Crear el diagrama de densidad
ggplot(datos_barrios_interes, aes(x = PiesCuadrados, fill = Barrio)) +
  geom_density(alpha = 0.5) +
  facet_wrap(~Barrio, scales = "free") +
  labs(title = "Diagrama de Densidad de Tamaños de Apartamentos por Barrio", x = "Tamaño (Pies Cuadrados)", y = "Densidad")


```

------------------------------------------------------------------------

19. Esta claro que las medias de metros cuadrados de cada uno de estos 5 barrios parecen ser diferentes, pero ¿son estadísticamente diferentes? ¿Que test habría que usar para comprobarlo?

------------------------------------------------------------------------

```{r}

# Filtrar los datos solo para los 5 barrios de interés
datos_barrios_interes <- airbnb_entire %>%
  filter(Barrio %in% barrios_mayor_precio_100_entradas$Barrio)

# Realizar el ANOVA
modelo_anova <- aov(PiesCuadrados ~ Barrio, data = datos_barrios_interes)

# Imprimir el resumen del ANOVA
print(summary(modelo_anova))

```

------------------------------------------------------------------------

Para únicamente los pisos de alquiler en el barrio de Sol:

`barrio_sol<-subset(airbnb_entire,Barrio=="Sol")`

Calcular un modelo lineal que combine alguna de estas variables: \* NumBanyos \* NumDormitorios \* MaxOcupantes \* MetrosCuadrados

```{r}

# Filtrar los datos solo para los pisos de alquiler en el barrio de Sol
barrio_sol <- subset(airbnb_entire, Barrio == "Sol")

# Crear un modelo lineal
modelo_lineal <- lm(Precio ~ NumBanyos + NumDormitorios + MaxOcupantes + MetrosCuadrados, data = barrio_sol)

# Imprimir el resumen del modelo
summary(modelo_lineal)

```

20. Primero calculamos la correlación para ver como se relacionan estas variables entre sí.

------------------------------------------------------------------------
```{r}

# Filtrar los datos solo para los pisos de alquiler en el barrio de Sol
barrio_sol <- subset(airbnb_entire, Barrio == "Sol")

# Calcular la matriz de correlación
correlaciones <- cor(barrio_sol[c("Precio", "NumBanyos", "NumDormitorios", "MaxOcupantes", "MetrosCuadrados")])

# Eliminar filas con datos faltantes
barrio_sol_sin_na  <- na.omit(barrio_sol[c("Precio", "NumBanyos", "NumDormitorios", "MaxOcupantes", "MetrosCuadrados")])
correlaciones_sin_na <- cor(barrio_sol_sin_na)


# Imprimir la matriz de correlación
print(correlaciones)

print(correlaciones_sin_na)


```
21. Se observa que la correlación entre el número de dormitorios y los metros cuadrados es sorprendentemente baja. ¿Son de fiar esos números?

Mediante un histograma o curvas de densidad podemos descartar números que notienen sentido en el dataframe barrio_sol, para tener una matriz de correlación que tenga mayor sentido.

```{r}

# Filtrar los datos solo para los pisos de alquiler en el barrio de Sol
barrio_sol <- subset(airbnb_entire, Barrio == "Sol")

# Crear histogramas o curvas de densidad para las variables de interés
library(ggplot2)

ggplot(barrio_sol, aes(x = NumDormitorios)) +
  geom_histogram(binwidth = 1, fill = "blue", color = "black", alpha = 0.7) +
  labs(title = "Histograma del Número de Dormitorios en Barrio Sol", x = "Número de Dormitorios", y = "Frecuencia")


ggplot(barrio_sol, aes(x = MetrosCuadrados)) +
  geom_histogram(binwidth = 10, fill = "green", color = "black", alpha = 0.7) +
  labs(title = "Histograma de Metros Cuadrados en Barrio Sol", x = "Metros Cuadrados", y = "Frecuencia")


```


22. Una vez que hayamos filtrado los datos correspondientes calcular el valor o la combinación de valores que mejor nos permite obtener el precio de un inmueble.

¿Que variable es más fiable para conocer el precio de un inmueble, el número de habitaciones o los metros cuadrados?

------------------------------------------------------------------------
```{r}

# Filtrar los datos solo para los pisos de alquiler en el barrio de Sol
barrio_sol <- subset(airbnb_entire, Barrio == "Sol")

# Ajustar un modelo lineal para NumDormitorios
modelo_dormitorios <- lm(Precio ~ NumDormitorios, data = barrio_sol)

# Ajustar un modelo lineal para MetrosCuadrados
modelo_metros_cuadrados <- lm(Precio ~ MetrosCuadrados, data = barrio_sol)

# Comparar la calidad del modelo
summary(modelo_dormitorios)
summary(modelo_metros_cuadrados)


# Realizar análisis de varianza entre los modelos
anova_modelos <- anova(modelo_dormitorios, modelo_metros_cuadrados)
print(anova_modelos)


```


23. Responde con su correspondiente margen de error del 95%, ¿cuantos euros incrementa el precio del alquiler por cada metro cuadrado extra del piso?

------------------------------------------------------------------------
```{r}


```
------------------------------------------------------------------------

24. Responde con su correspondiente margen de error del 95%, ¿cuantos euros incrementa el precio del alquiler por cada habitación?

------------------------------------------------------------------------
```{r}


```
------------------------------------------------------------------------

25. ¿Cual es la probabilidad de encontrar, en el barrio de Sol, un apartamento en alquiler con 3 dormitorios? ¿Cual es el intervalo de confianza de esa probabilidad?

------------------------------------------------------------------------
```{r}


```
------------------------------------------------------------------------
