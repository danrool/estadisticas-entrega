---
format: html
editor: visual
---

```{r}
library(ggplot2)
library(dplyr)
```

Cargar los datos en un dataframe llamado: airbnb

```{r}
# Cargar datos, separador ","
airbnb<-read.csv('data//airbnb.csv',sep = ',', stringsAsFactors = T)

# Verificar estructurar
str(airbnb)

# Ver primeras filas de df
head(airbnb)

```

Mostrar las primeras 6 filas del dataframe

airbnb.

```{r}
# Mostrar primeras 6 filas, dos formas.
head(airbnb, n=6)

```

Renombrar las columnas de la siguiente forma:

| Nombre original        | Nuevo nombre   |
|------------------------|----------------|
| Zipcode                | CodigoPostal   |
| Neighbourhood.Cleansed | Barrio         |
| Property.Type          | TipoPropiedad  |
| Room.Type              | TipoAlquiler   |
| Accommodates           | MaxOcupantes   |
| Bathrooms              | NumBanyos      |
| Bedrooms               | NumDormitorios |
| Beds                   | NumCamas       |
| Bed.Type               | TipoCama       |
| Amenities              | Comodidades    |
| Square.Feet            | PiesCuadrados  |
| Price                  | Precio         |
| Review.Scores.Rating   | Puntuacion     |

```{r}

# Definir los nuevos nombre como vector
newnames<-c("CodigoPostal","Barrio","TipoPropiedad","TipoAlquiler","MaxOcupantes","NumBanyos", "NumDormitorios","NumCamas","TipoCama","Comodidades","PiesCuadrados","Precio","Puntuacion")

# Modificar el nombre de las columas
colnames(airbnb)<-newnames

#Observar las primeras filas
head(airbnb, n=6)

```

1.  Crea una nueva columna llamada MetrosCuadrados a partir de la columna PiesCuadrados.

Ayuda: 1 pie cuadrado son 0,092903 metros cuadrdados

```{r}
# Crear nueva columna MetrosCuadrados
airbnb$MetrosCuadrados<-airbnb$PiesCuadrados*0.092903

# Observar las primeras filas
head(airbnb, n=6)
```

------------------------------------------------------------------------

2.  Miremos el código postal. Es una variable con entradas erroneas. Hay valores como '','-' y '28' que deberían ser considerados como NA. Así mismo también debería ser NA todos los que no compiencen por 28, ya que estamos con códigos postales de Madrid

```{r}

# Limpiar columna CodigoPostal

length(airbnb$CodigoPostal) #longitud total airbnb$CodigoPostal

```
```{r}


airbnb[which(airbnb$CodigoPostal == ''), 'CodigoPostal'] <- NA 
airbnb[which(airbnb$CodigoPostal == '-'), 'CodigoPostal'] <- NA 
airbnb[which(airbnb$CodigoPostal == '28'), 'CodigoPostal'] <- NA 

```



El código postal 28002, 28004 y 28051 tienen entradas repetidas. Por ejemplo las entradas 28002\n20882 deberían ir dnetro de 28002

```{r}

# Reemplazar el codigo postal por el valor que está delante del \n

airbnb[which(airbnb$CodigoPostal == '28002\n28002'), 'CodigoPostal'] <- '28002' 
airbnb[which(airbnb$CodigoPostal == '28051\n28051'), 'CodigoPostal'] <- '28051' 
airbnb[which(airbnb$CodigoPostal == 'Madrid 28004'), 'CodigoPostal'] <- '28004'


```


El codigo 2804 debería ser 28004, 2805 deberia ser 28005 y 2815 juncto con 2815 debería ser 28015

Limpia los datos de la columna Codigo Postal

```{r}

# Limpio los datos solcitados

airbnb[which(airbnb$CodigoPostal == '2804'), 'CodigoPostal'] <- '28004' 
airbnb[which(airbnb$CodigoPostal == '2805'), 'CodigoPostal'] <- '28005' 
airbnb[which(airbnb$CodigoPostal == '2015'), 'CodigoPostal'] <- '28015' 
airbnb[which(airbnb$CodigoPostal == '2815'), 'CodigoPostal'] <- '28015' 
airbnb[which(airbnb$CodigoPostal == '280013'), 'CodigoPostal'] <- '28013'

airbnb[which(airbnb$CodigoPostal == '20013'), 'CodigoPostal'] <- NA 
airbnb[which(airbnb$CodigoPostal == '20126'), 'CodigoPostal'] <- NA 
airbnb[which(airbnb$CodigoPostal == '25008'), 'CodigoPostal'] <- NA 
airbnb[which(airbnb$CodigoPostal == '27004'), 'CodigoPostal'] <- NA 
airbnb[which(airbnb$CodigoPostal == '27013'), 'CodigoPostal'] <- NA

#table(airbnb$CodigoPostal)


```

```{r}


# Establezco el codigo postal como factor
airbnb$CodigoPostal<-factor(airbnb$CodigoPostal) 
summary(airbnb$CodigoPostal)

```

------------------------------------------------------------------------

3.  Una vez limpios los datos ¿Cuales son los códigos postales que tenemos?

```{r}

#Codigos Postales del df 

table(airbnb$CodigoPostal)


```

------------------------------------------------------------------------

4.  ¿Cuales son los 5 códigos postales con más entradas? ¿Y con menos? ¿Cuantas entradas tienen?

```{r}

# Los cinco codiogs con mas y con menos entradas son 

entradas <- airbnb |> group_by(CodigoPostal) |> count(sort = TRUE)

print(head(entradas, 5))

print(tail(entradas, 5))

```

------------------------------------------------------------------------

5.  ¿Cuales son los barrios que hay en el código postal 28012?

```{r}

# Barrios del codigo postal 28012

barrios_28012 <- unique(airbnb$Barrio[which(airbnb$CodigoPostal == 28012)])

print (barrios_28012)


```

------------------------------------------------------------------------

6.  ¿Cuantas entradas hay en cada uno de esos barrios para el codigo postal 28012?

```{r}

# Entradas de barrios para el codigo postal 28012
df_28012 <- airbnb |> filter(CodigoPostal == 28012) |> group_by(Barrio) |> count(sort = TRUE)

#Muestro las entradas
print(df_28012)

# Muestro la cantidad de filas
cat('\nHay ', as.character(nrow(df_28012)), ' barrios\n\n')

```

------------------------------------------------------------------------

7.  ¿Cuantos barrios hay en todo el dataset airbnb? ¿Cuales son?

```{r}


# Determino los nombres unicos
df_barrios <- unique(airbnb$Barrio)

# Muestro el resultado
cat('\nHay ', as.character(length(df_barrios)), ' barrios\n\n')
print(df_barrios)

```

------------------------------------------------------------------------

8.  ¿Cuales son los 5 barrios que tienen mayor número entradas?

```{r}

# Agrupo los barrios cuento y ordeno
barrios <- airbnb |> group_by(Barrio) |> count(sort = TRUE)

print(head(barrios, 5))


```

------------------------------------------------------------------------

9.  ¿Cuantos Tipos de Alquiler diferentes hay? ¿Cuales son? ¿Cuantas entradas en el dataframe hay por cada tipo?

Muestra el diagrama de cajas del precio para cada uno de los diferentes Tipos de Alquiler

```{r}

# Cantidad de tipos de alquier
paste("Hay ", length(unique(airbnb$TipoAlquiler)), " tipos de alquileres")
```

```{r}

paste("TIPOS DE ALQUILER")

# Calculo y muestro los tipos de alquiler y la cantidad por tipo
tipos_alquileres <- airbnb |> group_by(TipoAlquiler) |> count(sort = TRUE)

print(tipos_alquileres)

```

```{r}
# Muestro el grafico

ggplot(airbnb, aes(y = Precio, x = TipoAlquiler, color = TipoAlquiler)) +
  geom_boxplot() +
  labs(title = "Diagrama de Precio por Tipo de Alquiler",
       y = "Precio", x = "Tipo de Alquiler")

```

------------------------------------------------------------------------

10. Cual es el precio medio de alquiler de cada uno, la diferencia que hay ¿es estadísticamente significativa? ¿Con que test lo comprobarías?

```{r}

# Calculo el precio medio por tipo

paste("PRECIO MEDIO POR TIPO")

for (l in levels(airbnb$TipoAlquiler)){
    df<-subset(airbnb,TipoAlquiler==l)
    print(paste("Tipo de alquiler :",l," , precio medio = ",mean(df$Precio,na.rm=TRUE)))
    if (nrow(df)>5000){
        df<-df[1:5000,]
    }
    
    st<-shapiro.test(df$Precio)
    print(paste("pvalor Shapiro = ",st$p.value))
}
```

```{r}
# Realizo un histograma para ver la distribucion
hist(airbnb$Precio, main = "Histograma de Precios")
hist(df_precio_medio$PrecioMedio, main = "Histograma de Medias")

# La distribucion no es normal
prueba_shapiro <- shapiro.test(airbnb$Precio[1:5000])
print(prueba_shapiro)
paste("Valor p significativamente bajo, no es normal")

prueba_kruskal <- kruskal.test(Precio ~ TipoAlquiler, data = airbnb)
print(prueba_kruskal)

paste("Valor p significativamente bajo, diferencias significativas en al menos dos grupos")
```

------------------------------------------------------------------------

11. Filtra el dataframe cuyos tipo de alquiler sea 'Entire home/apt' y guardalo en un dataframe llamado *airbnb_entire*. Estas serán las entradas que tienen un alquiler del piso completo.

```{r}

# Filtrado de datos de tipo de alquiler 'Entire home/apt'
airbnb_entire <- airbnb |> filter(TipoAlquiler =="Entire home/apt")

print(airbnb_entire)

```

------------------------------------------------------------------------

12. ¿Cuales son los 5 barrios que tienen un mayor número de apartamentos enteros en alquiler? Nota: Mirar solo en airbnb_entire. A partir de este punto y hasta que se diga lo contrario partiremos de airbnb_entire.

```{r}

# Agrupo por barrio y ordeno los datos
barrios_airbnb_entire <- airbnb_entire |> group_by(Barrio) |> count(sort = TRUE)

# Muestro los 5 primeros
head(barrios_airbnb_entire, n=5)


```

------------------------------------------------------------------------

13. ¿Cuales son los 5 barrios que tienen un mayor precio medio de alquiler para apartamentos enteros (es decir, del dataframe airbnb_entire)? ¿Cual es su precio medio?

Ayuda: Usa la función aggregate `aggregate(.~colname,df,mean,na.rm=TRUE)`

```{r}

# Calculo con la forma solicitada
barrios_mayor_precio_medio <- aggregate(Precio ~ Barrio, data = airbnb_entire, mean, ,na.rm=TRUE)

# Ordeno los datos descendente
barrios_mayor_precio_medio <- barrios_mayor_precio_medio[order(-barrios_mayor_precio_medio$Precio),]

# Muestro los 5 primeros
head(barrios_mayor_precio_medio, n=5)


```

------------------------------------------------------------------------

14. ¿Cuantos apartamentos hay en cada uno de esos barrios?

Mostrar una dataframe con el nombre del barrio, el precio y el número de entradas.

Ayuda: Podeis crear un nuevo dataframe con las columnas "Barrio" y "Freq" que contenga el número de entradas en cada barrio y hacer un merge con el dataframe del punto anterior.

```{r}


# Agrupo por barrio y sumarizo registros y calculos
barrios_mayor_precio_medio_aptos <- airbnb_entire |>
  group_by(Barrio) |>
  summarize(
    PrecioMedio = mean(Precio, na.rm = TRUE),
    Registros = n()
  )

print(barrios_mayor_precio_medio_aptos)

```

```{r}

# Barrios
barrios <- head(barrios_mayor_precio_medio, n=5)

# Agrupo por barrio y sumarizo registros y calculos
barrios_mayor_precio_medio_aptos_top5 <- airbnb_entire |>
  semi_join(barrios, by = c("Barrio" = "Barrio")) |>
  group_by(Barrio) |>
  summarize(
    PrecioMedio = mean(Precio, na.rm = TRUE),
    Registros = n()
  )

print(barrios_mayor_precio_medio_aptos_top5)
```



------------------------------------------------------------------------

15. Partiendo del dataframe anterior, muestra los 5 barrios con mayor precio, pero que tengan más de 100 entradas de alquiler.

```{r}

# Filtrar los datos mayores con mas de 100 ocurrencias, ordenar y mostrar los 5 mas relevantes
barrios_mayor_precio_100_entradas <- barrios_mayor_precio_medio_aptos |> 
          filter(Registros >100) |>
          arrange(desc(PrecioMedio)) |>
          top_n(5)
  

# Mostrar los datos          
print(barrios_mayor_precio_100_entradas)

```

------------------------------------------------------------------------

16. Dibuja el diagrama de densidad de distribución de los diferentes precios. Serían 5 gráficas, una por cada barrio.

```{r}

# Filtrar los datos para los 5 barrios
datos_barrios_interes <- airbnb_entire %>%
  filter(Barrio %in% barrios_mayor_precio_100_entradas$Barrio)


barrios<-head(barrios_mayor_precio_100_entradas,5)$Barrio
df_dens_barrios<-subset(airbnb_entire,Barrio %in% barrios)
ggplot(df_dens_barrios,aes(x=Precio,color=Barrio)) + 
  geom_density(aes(x = Precio, fill = Barrio), position = 'stack') + 
  facet_grid(Barrio~., scales = 'free') +
  xlab("Precio") + 
  ylab("Densidad") + 
  ggtitle("Diagrama de densidad (distribucion diferentes precios)") +
  theme_minimal()

```

------------------------------------------------------------------------

17. Calcula el tamaño medio, en metros cuadrados, para los 5 barrios anteriores y muestralo en el mismo dataframe junto con el precio y número de entradas

```{r}
# Filtrar los datos solo para los 5 barrios
datos_barrios_interes <- airbnb_entire %>%
  filter(Barrio %in% barrios_mayor_precio_100_entradas$Barrio)

# Calcular el tamaño medio por barrio
tamano_medio <- datos_barrios_interes %>%
  group_by(Barrio) %>%
  summarize(
    TamanoMedio = mean(MetrosCuadrados, na.rm = TRUE)
  )

# Unir la información al dataset original
resultados_finales <- left_join(barrios_mayor_precio_100_entradas, tamano_medio, by = "Barrio")

# Imprimir el resultado final
print(resultados_finales)


```

------------------------------------------------------------------------

18. Dibuja el diagrama de densidad de distribución de los diferentes tamaños de apartamentos. Serían 5 gráficas, una por cada barrio.

```{r}

# Filtrar los datos solo para los 5 barrios
datos_barrios_interes <- airbnb_entire %>%
  filter(Barrio %in% barrios_mayor_precio_100_entradas$Barrio)

ggplot(datos_barrios_interes,aes(x=Precio,color=Barrio)) + 
  geom_density(aes(x = MetrosCuadrados, fill = Barrio), position = 'stack') + 
  facet_grid(Barrio~., scales = 'free') +
  xlab("MetrosCuadrados") + 
  ylab("Densidad") + 
  ggtitle("Diagrama de densidad de Metros Cuadrados") +
  theme_minimal()

```

------------------------------------------------------------------------

19. Esta claro que las medias de metros cuadrados de cada uno de estos 5 barrios parecen ser diferentes, pero ¿son estadísticamente diferentes? ¿Que test habría que usar para comprobarlo?

------------------------------------------------------------------------

```{r}

# Filtrar los datos solo para los 5 barrios de interés
datos_barrios_interes <- airbnb_entire %>%
  filter(Barrio %in% barrios_mayor_precio_100_entradas$Barrio)

# Realizo el ANOVA para ver si hay diferencias significativas en las medias
anova <- aov(MetrosCuadrados ~ Barrio, data = datos_barrios_interes)

# Imprimir el resumen del ANOVA
print(summary(anova))

paste("El valor de p inferior a 0.00507 sugiere que es poco probable que la diferencia es producto del azar")

#Hacemos el test de Tukey para saber cual es la diferente.

# Test de Tukey para realizar las comparaciones
comparaciones <- TukeyHSD(anova)
print(comparaciones)


# Sol es el que tiene mayor diferenicas con el resto.

```

------------------------------------------------------------------------

Para únicamente los pisos de alquiler en el barrio de Sol:

`barrio_sol<-subset(airbnb_entire,Barrio=="Sol")`

Calcular un modelo lineal que combine alguna de estas variables: \* NumBanyos \* NumDormitorios \* MaxOcupantes \* MetrosCuadrados

```{r}

# Filtrar los datos solo para los pisos de alquiler en el barrio de Sol
barrio_sol <- subset(airbnb_entire, Barrio == "Sol")

# Creo un modelo lineal
modelo_lineal <- lm(Precio ~ NumBanyos + NumDormitorios + MaxOcupantes + MetrosCuadrados, data = barrio_sol)

# Imprimir el resumen del modelo
summary(modelo_lineal)

paste("El numero de dormitorios y el metros cuadrados son significativos para el precio por presentar p-values inferiores a 0.001 y 0.004")

```

20. Primero calculamos la correlación para ver como se relacionan estas variables entre sí.

------------------------------------------------------------------------
```{r}

# Filtrar los datos de barrio de Sol
barrio_sol <- subset(airbnb_entire, Barrio == "Sol")

# Calcular la correlación
correlaciones <- cor(barrio_sol[c("Precio", "NumBanyos", "NumDormitorios", "MaxOcupantes", "MetrosCuadrados")])

# Eliminar filas con datos faltantes
barrio_sol_sin_na  <- na.omit(barrio_sol[c("Precio", "NumBanyos", "NumDormitorios", "MaxOcupantes", "MetrosCuadrados")])
correlaciones_sin_na <- cor(barrio_sol_sin_na)


# Mostrar la correlación
print(correlaciones)

print(correlaciones_sin_na)


```
21. Se observa que la correlación entre el número de dormitorios y los metros cuadrados es sorprendentemente baja. ¿Son de fiar esos números?

Mediante un histograma o curvas de densidad podemos descartar números que notienen sentido en el dataframe barrio_sol, para tener una matriz de correlación que tenga mayor sentido.

```{r}

# Histogramas para cada variable
ggplot(barrio_sol, aes(x = Precio)) +
  geom_histogram(binwidth = 10, fill = "blue", color = "black", alpha = 0.7) +
  labs(title = "Histograma de Precio")

ggplot(barrio_sol, aes(x = NumDormitorios)) +
  geom_histogram(binwidth = 1, fill = "red", color = "black", alpha = 0.7) +
  labs(title = "Histograma de NumDormitorios")


ggplot(barrio_sol, aes(x = MetrosCuadrados)) +
  geom_histogram(binwidth = 10, fill = "orange", color = "black", alpha = 0.7) +
  labs(title = "Histograma de MetrosCuadrados")

# Gráficos de dispersión para pares de variables
pairs(~Precio + NumDormitorios + MetrosCuadrados, data = barrio_sol)


barrio_sol_sin_na_new  <- na.omit(barrio_sol[c("Precio", "NumDormitorios", "MetrosCuadrados")]) |>
                          filter(NumDormitorios < 5 & MetrosCuadrados < 250 )


correlaciones_sin_na_new <- cor(barrio_sol_sin_na_new)

print(correlaciones_sin_na_new)

paste("Al eliminar los outlayers mas importantes se nota un incremento en la correlacion de dormitorios y metros cuadrados con el precio. para ambas variables")

```


22. Una vez que hayamos filtrado los datos correspondientes calcular el valor o la combinación de valores que mejor nos permite obtener el precio de un inmueble.

¿Que variable es más fiable para conocer el precio de un inmueble, el número de habitaciones o los metros cuadrados?

------------------------------------------------------------------------
```{r}

# Filtrar los datos solo para los pisos de alquiler en el barrio de Sol
barrio_sol <- subset(airbnb_entire, Barrio == "Sol")

# Ajustar un modelo lineal para NumDormitorios
modelo_dormitorios <- lm(Precio ~ NumDormitorios, data = barrio_sol)

# Ajustar un modelo lineal para MetrosCuadrados
modelo_metros_cuadrados <- lm(Precio ~ MetrosCuadrados, data = barrio_sol)

# Comparar la calidad del modelo
summary(modelo_dormitorios)
summary(modelo_metros_cuadrados)

paste("Ambas correlaciones son muy buenas, 0.65 y 0.59, la correlacion de los dormitorios tiene mejor p/value que indica que disminuye la posiblidad de que sea erroneo.")



```


23. Responde con su correspondiente margen de error del 95%, ¿cuantos euros incrementa el precio del alquiler por cada metro cuadrado extra del piso?

------------------------------------------------------------------------
```{r}

# Calculo el modelo lineal
model<-lm(barrio_sol,formula=Precio~MetrosCuadrados)
summary(model)

# Obtengo el intervalo de confianza
confint(model)["MetrosCuadrados",]


```


------------------------------------------------------------------------

24. Responde con su correspondiente margen de error del 95%, ¿cuantos euros incrementa el precio del alquiler por cada habitación?

```{r}

# Calculo el modelo lineal
modeldom<-lm(barrio_sol,formula=Precio~NumDormitorios)
summary(modeldom)

# Obtengo el intervalo de confianza
confint(modeldom)["NumDormitorios",]


```


------------------------------------------------------------------------

25. ¿Cual es la probabilidad de encontrar, en el barrio de Sol, un apartamento en alquiler con 3 dormitorios? ¿Cual es el intervalo de confianza de esa probabilidad?

```{r}

# Filtrar los datos de barrio de Sol
barrio_sol_apto <- subset(airbnb_entire, Barrio == "Sol")

n3 <- nrow(barrio_sol[barrio_sol_apto$TipoPropiedad == 'Apartment' & barrio_sol_apto$NumDormitorios == 3,])

total <- nrow(barrio_sol_apto[barrio_sol_apto$TipoPropiedad == 'Apartment',])

print(paste("La probabilidad de encontrar un apartamento caracteristicas es de un:",n3/total))


```
```{r}



bt <- binom.test(n3,total)
bt

```


